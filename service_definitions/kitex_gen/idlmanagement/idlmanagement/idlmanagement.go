// Code generated by Kitex v0.5.2. DO NOT EDIT.

package idlmanagement

import (
	idlmanagement "api_gw/service_definitions/kitex_gen/idlmanagement"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return iDLManagementServiceInfo
}

var iDLManagementServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "IDLManagement"
	handlerType := (*idlmanagement.IDLManagement)(nil)
	methods := map[string]kitex.MethodInfo{
		"CheckVersion":             kitex.NewMethodInfo(checkVersionHandler, newIDLManagementCheckVersionArgs, newIDLManagementCheckVersionResult, false),
		"GetServiceThriftFileName": kitex.NewMethodInfo(getServiceThriftFileNameHandler, newIDLManagementGetServiceThriftFileNameArgs, newIDLManagementGetServiceThriftFileNameResult, false),
		"GetThriftFile":            kitex.NewMethodInfo(getThriftFileHandler, newIDLManagementGetThriftFileArgs, newIDLManagementGetThriftFileResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idlmanagement",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func checkVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*idlmanagement.IDLManagementCheckVersionResult)
	success, err := handler.(idlmanagement.IDLManagement).CheckVersion(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newIDLManagementCheckVersionArgs() interface{} {
	return idlmanagement.NewIDLManagementCheckVersionArgs()
}

func newIDLManagementCheckVersionResult() interface{} {
	return idlmanagement.NewIDLManagementCheckVersionResult()
}

func getServiceThriftFileNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idlmanagement.IDLManagementGetServiceThriftFileNameArgs)
	realResult := result.(*idlmanagement.IDLManagementGetServiceThriftFileNameResult)
	success, err := handler.(idlmanagement.IDLManagement).GetServiceThriftFileName(ctx, realArg.ServiceName)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newIDLManagementGetServiceThriftFileNameArgs() interface{} {
	return idlmanagement.NewIDLManagementGetServiceThriftFileNameArgs()
}

func newIDLManagementGetServiceThriftFileNameResult() interface{} {
	return idlmanagement.NewIDLManagementGetServiceThriftFileNameResult()
}

func getThriftFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idlmanagement.IDLManagementGetThriftFileArgs)
	realResult := result.(*idlmanagement.IDLManagementGetThriftFileResult)
	success, err := handler.(idlmanagement.IDLManagement).GetThriftFile(ctx, realArg.ServiceName)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newIDLManagementGetThriftFileArgs() interface{} {
	return idlmanagement.NewIDLManagementGetThriftFileArgs()
}

func newIDLManagementGetThriftFileResult() interface{} {
	return idlmanagement.NewIDLManagementGetThriftFileResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CheckVersion(ctx context.Context) (r string, err error) {
	var _args idlmanagement.IDLManagementCheckVersionArgs
	var _result idlmanagement.IDLManagementCheckVersionResult
	if err = p.c.Call(ctx, "CheckVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetServiceThriftFileName(ctx context.Context, serviceName string) (r string, err error) {
	var _args idlmanagement.IDLManagementGetServiceThriftFileNameArgs
	_args.ServiceName = serviceName
	var _result idlmanagement.IDLManagementGetServiceThriftFileNameResult
	if err = p.c.Call(ctx, "GetServiceThriftFileName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetThriftFile(ctx context.Context, serviceName string) (r string, err error) {
	var _args idlmanagement.IDLManagementGetThriftFileArgs
	_args.ServiceName = serviceName
	var _result idlmanagement.IDLManagementGetThriftFileResult
	if err = p.c.Call(ctx, "GetThriftFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
