// Code generated by hertz generator.

package main

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
)

type BodyReq struct {
	First int `json:"first"`
	Second int `json:"second"`
}

type Res struct {
	Res int `json:"res"`
}

func genErrResp(ctx *app.RequestContext, statusCode int, err error) {
	ctx.JSON(statusCode, utils.H{
		"error": utils.H{
			"code": statusCode,
			"message": err.Error(),
		},
	})
}
func genSucResp(ctx *app.RequestContext, res interface{}) {
	ctx.JSON(consts.StatusOK, utils.H{
		"data": res,
	})
}

func main() {
	h := server.Default(server.WithHostPorts("0.0.0.0:8888"))
	h.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"*"},
		AllowHeaders:     []string{"*"},
		AllowCredentials: true,
	}))

	h.POST("/add", func(c context.Context, ctx *app.RequestContext) {
		var req BodyReq
		
		err := ctx.BindAndValidate(&req)
		if err != nil {
			genErrResp(ctx, consts.StatusBadRequest, err)
			return
		}
		genSucResp(ctx, utils.H{
			"res": req.First + req.Second,
		})
	})

	h.POST("/subtract", func(c context.Context, ctx *app.RequestContext) {
		var req BodyReq
		
		err := ctx.BindAndValidate(&req)
		if err != nil {
			genErrResp(ctx, consts.StatusBadRequest, err)
			return
		}
		genSucResp(ctx, utils.H{
			"res": req.First - req.Second,
		})
	})

	register(h)
	h.Spin()
}
